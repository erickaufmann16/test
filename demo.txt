start transaction new_order;

select w_tax from warehouse;
//select w_tax from warehouse where w_id=:w_id;

select d_tax from district where d_id=:d_id and d_w_id=:w_id;

select d_next_o_id from district where d_id=:d_id and d_w_id=:w_id;

update district set d_next_o_id=:d_next_o_id+1 where d_id=:d_id and d_w_id=:w_id;

select c_discount, c_last, c_credit from customer where c_w_id=:w_id and c_d_id=:c_d_id and c_id=:c_id;

insert into orders values(:o_id, :d_id, :w_id, :c_id, :datetime, NULL, :o_ol_cnt, :o_all_local);

insert into new_order values(:o_ld, :d_id, :w_id);

And for each item we're going to order, we execute the following block of statements in a for loop:

{    
    select i_price, i_name, i_data from item where i_id=:ol_i_id;

    select s_quantity, s_data, s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05, s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10 from stock where s_i_id=:ol_i_id and s_w_id=:ol_supply_w_id;

    update stock set s_quantity=:s_quantity where s_i_id=:ol_i_id and s_w_id=:ol_supply_w_id;

    update stock set s_ytd=s_ytd+:ol_quantity where s_i_id=:ol_i_id and s_w_id=:ol_supply_w_id;

    update stock set s_order_cnt=s_order_cnt+1 where s_i_id=:ol_i_id and s_w_id=:ol_supply_w_id;

    if (:ol_supply_w_id !=:w_id) {
             update stock set s_remote_cnt=s_remote_cnt+1 where s_i_id=:ol_i_id and s_w_id=:ol_supply_w_id;
     }

    insert into order_line values(:o_id, :d_id, :w_id, :ol_number, :ol_i_id, :ol_supply_w_id, NULL, :ol_quantity, :ol_amount, :ol_dist_info);
}

commit;

start transaction Order_Status;

    if the customer in the order is represented by a name{                         //60% chances

select_set:  

        select count(c_id) from customer where c_last=:c_last and c_d_id=:c_d_id and c_w_id=:c_w_id;

        select c_balance, c_first, c_middle, c_id from customer where c_last=:c_last and c_d_id=:c_d_id and c_w_id=:c_w_id order by c_first;
    } 
    else if the customer in the order is represented by an id{                    //40% chances

        select c_balance, c_first, c_middle, c_last from customer where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;
    }
    
    select o_id, o_carrier_id, o_entry_d from orders where o_d_id=:c_d_id and o_w_id=:c_w_id and o_c_id=:c_id order by o_id desc;

    select ol_i_id, ol_supply_w_id, ol_quantity, ol_amount, ol_delivery_d from order_line where ol_d_id=:c_d_id and ol_w_id=:c_w_id and ol_o_id=:o_id;

commit;

start transaction payment;

select w_street_1, w_street_2, w_city, w_state, w_zip, w_name from warehouse where w_id=:w_id;

    update warehouse set w_ytd=w_ytd+:h_amount where w_id=:w_id;

    select d_street_1, d_street_2, d_city, d_state, d_zip, d_name from district where d_w_id=:w_id and d_id=:d_id;

    update district set d_ytd=d_ytd+:h_amount where d_w_id=:w_id and d_id=:d_id;

    if the customer making the payment is represented by a name{          //60% chances

select_set:  

        select count(c_id) from customer where c_last=:c_last and c_d_id=:c_d_id and c_w_id=:c_w_id;

        select c_first, c_middle, c_id, c_street_1, c_street_2, c_city, c_state, c_zip, c_phone, c_credit, c_credit_lim, c_discount, c_balance, c_since from customer where c_last=:c_last and c_d_id=:c_d_id and c_w_id=:c_w_id order by c_first;
    }
    else if the customer making the payment is represented by an id{      //40% chances

        select c_first, c_middle, c_last, c_street_1, c_street_2, c_city, c_state, c_zip, c_phone, c_credit, c_credit_lim, c_discount, c_balance, c_since from customer where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;
    }

    update customer set c_balance=c_balance-:h_amount where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;

    update customer set c_ytd_payment=c_ytd_payment+:h_amount where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;

    update customer set c_payment_cnt=c_payment_cnt+1 where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;

    if (:c_credit=”BC”){

        select c_data from customer where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;

        update customer set c_data=:c_data where c_id=:c_id and c_d_id=:c_d_id and c_w_id=:c_w_id;
    }    

    insert into history values(:c_d_id, :c_w_id, :c_id, :d_id, :w_id, :datatime, :h_amount, :h_data);

commit;

start transaction delivery;

select no_o_id from new_order where no_d_id=:d_id and no_w_id=:w_id order by no_o_id asc;

    if the former SQL statement returns a non-empty set{

        delete from new_order where no_d_id=:d_id and no_w_id=:w_id and no_o_id=:no_o_id;

        //In TPCC's delivery transaction, the previous two statements are expressed as an updatable 
          cursor. Since MySQL Cluster doesn't support updatable cursors, I've changed it to the 
          previous two statements which are semantically equivalent.         

        select o_c_id from orders where o_d_id=:d_id and o_w_id=:w_id and o_id=:no_o_id;

        update orders set o_carrier_id=:o_carrier_id where o_d_id=:d_id and o_w_id=:w_id and o_id=:no_o_id;

        update order_line set ol_delivery_d=:datetime where ol_d_id=:d_id and ol_w_id=:w_id and ol_o_id=:no_o_id;

select_set:ol_amount

        select sum(ol_amount) from order_line where ol_d_id=:d_id and ol_w_id=:w_id and ol_o_id=:no_o_id;

        update customer set c_balance=c_balance+:ol_total where c_id=:c_id and c_d_id=:d_id and c_w_id=:w_id;

        update customer set c_delivery_cnt=c_delivery_cnt+1where c_id=:c_id and c_d_id=:d_id and c_w_id=:w_id;
    }

commit;

start transaction stock_level;

select d_next_o_id from district where d_w_id=:w_id and d_id=:d_id;

select_set:ol_i_id

d_set:ol_w_id, ol_d_id,ol_o_id

    select distinct(ol_i_id) from order_line where ol_w_id=:w_id and ol_d_id=:d_id and ol_o_id<:o_id and ol_o_id>=:o_id-20;

    for each ol_i_id obtained in the last statement, assuming it is stored in an array cell :ol_i_id[i] {

select_set:

        select count(s_i_id) from stock where s_i_id=:ol_i_id[i] and s_w_id=:w_id and s_quantity<:threshold;
    }

commit;